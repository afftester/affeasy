generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                          String                       @id @default(cuid())
  name                        String?
  email                       String?                      @unique
  emailVerified               DateTime?
  image                       String?
  createdAt                   DateTime                     @default(now())
  subscribed                  Boolean                      @default(true)
  userAdvertiserRelationships UserAdvertiserRelationship[]
  userBrandRelationships      UserBrandRelationship[]
  accounts                    Account[]
  sessions                    Session[]
  projects                    ProjectUsers[]
  links                       Link[]
  tokens                      Token[]
}

model UserAdvertiserRelationship {
  id                     String                  @id @default(cuid())
  userId                 String
  advertiserId           String
  apiKey                 String?
  username               String?
  password               String?
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  advertiser             Advertiser              @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  userBrandRelationships UserBrandRelationship[]

  @@unique([userId, advertiserId])
  @@index([userId])
  @@index([advertiserId])
}

model Advertiser {
  id                          String                        @id @default(cuid())
  name                        String
  userBrandRelationships      UserBrandRelationship[]
  brands                      BrandAdvertiserRelationship[]
  userAdvertiserRelationships UserAdvertiserRelationship[]
}

model Brand {
  id                     String                        @id @default(cuid())
  name                   String
  url                    String?
  advertisers            BrandAdvertiserRelationship[]
  userBrandRelationships UserBrandRelationship[]
}

model BrandAdvertiserRelationship {
  id                     String                  @id @default(cuid())
  brandId                String
  advertiserId           String
  brandIdAtAdvertiser    String                  @unique
  brand                  Brand                   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  advertiser             Advertiser              @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  userBrandRelationships UserBrandRelationship[]

  @@unique([brandId, advertiserId])
  @@index([brandId])
  @@index([advertiserId])
}

model UserBrandRelationship {
  id                        String                      @id @default(cuid())
  userId                    String
  brandId                   String
  advertiserId              String
  userAdvertiserRelationId  String
  brandAdvertiserRelationId String
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand                     Brand                       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  advertiser                Advertiser                  @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
  userAdvertiserRelation    UserAdvertiserRelationship  @relation(fields: [userAdvertiserRelationId], references: [id], onDelete: Cascade)
  brandAdvertiserRelation   BrandAdvertiserRelationship @relation(fields: [brandAdvertiserRelationId], references: [id], onDelete: Cascade)

  @@unique([userId, brandId, advertiserId])
  @@index([userId])
  @@index([brandId])
  @@index([advertiserId])
  @@index([userAdvertiserRelationId])
  @@index([brandAdvertiserRelationId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id                String           @id @default(cuid())
  name              String
  slug              String           @unique
  logo              String?
  plan              String           @default("free")
  stripeId          String?          @unique
  billingCycleStart Int
  usage             Int              @default(0)
  usageLimit        Int              @default(1000)
  linksUsage        Int              @default(0)
  linksLimit        Int              @default(25)
  domainsLimit      Int              @default(3)
  tagsLimit         Int              @default(5)
  usersLimit        Int              @default(1)
  monitoringId      String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  inviteCode        String?          @unique
  users             ProjectUsers[]
  invites           ProjectInvite[]
  sentEmails        SentEmail[]
  links             Link[]
  domains           Domain[]
  tags              Tag[]
  defaultDomains    DefaultDomains[]
}

model ProjectInvite {
  email     String
  expires   DateTime
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@index([projectId])
}

model DefaultDomains {
  id        String  @id @default(cuid())
  offrsus   Boolean @default(true)
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role     @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Domain {
  id          String    @id @default(cuid())
  slug        String    @unique
  verified    Boolean   @default(false)
  target      String?
  type        String    @default("redirect")
  placeholder String    @default("https://dub.co/help/article/what-is-dub")
  description String?
  projectId   String?
  primary     Boolean   @default(false)
  archived    Boolean   @default(false)
  publicStats Boolean   @default(false)
  clicks      Int       @default(0)
  lastClicked DateTime?
  lastChecked DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  links       Link[]

  @@index([projectId])
  @@index([clicks(sort: Desc)])
  @@index([lastClicked])
  @@index([lastChecked])
}

model Link {
  id            String    @id @default(cuid())
  domain        String
  key           String
  url           String    @db.LongText
  archived      Boolean   @default(false)
  expiresAt     DateTime?
  password      String?
  proxy         Boolean   @default(false)
  title         String?
  description   String?   @db.VarChar(280)
  image         String?   @db.LongText
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  utm_term      String?
  utm_content   String?
  rewrite       Boolean   @default(false)
  ios           String?   @db.LongText
  android       String?   @db.LongText
  geo           Json?
  userId        String?
  projectId     String?
  publicStats   Boolean   @default(false)
  clicks        Int       @default(0)
  lastClicked   DateTime?
  checkDisabled Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tagId         String?
  comments      String?   @db.LongText
  user          User?     @relation(fields: [userId], references: [id])
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectDomain Domain?   @relation(fields: [domain], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  tag           Tag?      @relation(fields: [tagId], references: [id])
  tags          LinkTag[]

  @@unique([domain, key])
  @@index([projectId])
  @@index([domain])
  @@index([tagId])
  @@index([proxy])
  @@index([password])
  @@index([createdAt(sort: Desc)])
  @@index([clicks(sort: Desc)])
  @@index([lastClicked])
  @@index([checkDisabled])
  @@index([userId])
  @@fulltext([key, url])
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String    @default("blue")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  links     Link[]
  linksNew  LinkTag[]

  @@unique([name, projectId])
  @@index([projectId])
}

model LinkTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  linkId    String
  tagId     String
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([linkId, tagId])
  @@index([linkId])
  @@index([tagId])
}

model jackson_index {
  id       Int    @id @default(autoincrement())
  key      String @db.VarChar(250)
  storeKey String @db.VarChar(250)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
}

model jackson_store {
  key        String    @id @db.VarChar(250)
  value      String    @db.Text
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  namespace  String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  modifiedAt DateTime? @db.Timestamp(0)

  @@index([namespace], map: "_jackson_store_namespace")
}

model jackson_ttl {
  key       String @id @db.VarChar(250)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
}

enum Role {
  owner
  member
}
